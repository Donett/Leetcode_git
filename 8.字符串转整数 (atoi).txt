8.字符串转整数 (atoi)

字符串转整数（atoi）
实现 atoi，将字符串转为整数。

在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。

当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。

若函数不能执行有效的转换，返回 0。

说明：

假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。如果数值超过可表示的范围，则返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。
	 
	 
int myAtoi(char* str) {//字符串->整数
    
    int s[10]={0};//用来保存数据
    int sign = 1;//用来保存符号
    
    int flag=0;//1：找到第一个非空字符 2:代表有符号
    int blank_cnt=0;//找到第一个非空字符之前 的 空格数
    int len = 0 ;//收集到的数据长度
    int i;
    
    //flag = 0 : 起始状态
    //flag = 1 : 要找第一个非空字符
    //flag = 2 : 已找到第一个非空字符
    //              -> 要进行判断 a.是否为数字
    //                           b.是否位数溢出
    //                           c.第一个数字若为0，不能选
    for(i=0;i<strlen(str);i++)
    {
        if(flag == 0 )
        {
            if(str[i]==' ') //1：找到第一个非空字符
            {
                blank_cnt++;
                continue;           
            }                
            else  //删除空格 
            {
                flag = 1;
            }                       
        }

        //flag = 1 无符号，flag=2有符号
        if(flag == 1)//检验第一个元素为 - + 或者数字，否则return 0
        {
             if(str[i]=='-')//2:找到第一个非空字符是 -或者+
             {
                sign = -1;
                flag = 2;
                continue;   
             }
             else if(str[i]=='+')
             {
                sign = 1;
                flag = 2;
                continue;      
             }
            else if(str[i]>='0'&&str[i]<='9')           //"+-2"-->0
            {
                flag = 2;//第一个数不能选0 所以重新选
            }
            else
            {
                return 0;
            }
        }
    
        if( flag == 2 ) 
        {
            if(str[i]>='0'&&str[i]<='9')
            {              
                if(len >= 10)      //##位数溢出
                {
                    printf("位数溢出\n");
                    if(sign==-1)
                        return INT_MIN;
                    if(sign==1)
                        return INT_MAX;   
                }   
                if(len==0&&str[i]=='0') //第1个元素是0，不接受
                    continue;
                s[len] = str[i]-'0';
                len++;   
            }   
            else
            {
                break;    //结束
            }
                
        }
    }
    
    //检验10位大小溢出问题————long类型
    long result = 0;
    for(i=0;i<len;i++)
        result = result*10 +s[i] ;
    printf("%ld\n",result);

    if(sign==1 && result>INT_MAX)
        return INT_MAX;
    else if(sign==-1 && result-1>INT_MAX) //result-1>INT_MAX 否则溢出--> INT_MAX+1
        return INT_MIN;
    
    printf("%d\n",flag);
    printf("%d\n",len);
    result = sign*result;        

    return result;
}

//法1：我的方法 麻烦
/*
int myAtoi(char* str) {//字符串->整数
    
    int s[10]={0};//用来保存数据
    int symbol = 1;//用来保存符号
    
    int flag=0;//1：找到第一个非空字符 2:代表有符号
    int blank_cnt=0;//找到第一个非空字符之前 的 空格数
    int len = 0 ;//收集到的数据长度
    int i;
    
    //flag = 0 : 起始状态
    //flag = 1 : 要找第一个非空字符
    //flag = 2 : 已找到第一个非空字符
    //              -> 要进行判断 a.是否为数字
    //                           b.是否位数溢出
    //                           c.第一个数字若为0，不能选
    for(i=0;i<strlen(str);i++)
    {
        if(flag == 0 )
        {
            if(str[i]==' ') //1：找到第一个非空字符
            {
                blank_cnt++;
                continue;           
            }                
            else  //删除空格 
            {
                flag = 1;
            }                       
        }

        //flag = 1 无符号，flag=2有符号
        if(flag == 1)//检验第一个元素为 - + 或者数字，否则return 0
        {
             if(str[i]=='-')//2:找到第一个非空字符是 -或者+
             {
                symbol = -1;
                flag = 2;
                continue;   
             }
             else if(str[i]=='+')
             {
                symbol = 1;
                flag = 2;
                continue;      
             }
            else if(str[i]>='0'&&str[i]<='9')           //"+-2"-->0
            {
                flag = 2;//第一个数不能选0 所以重新选
            }
            else
            {
                return 0;
            }
        }
    
        if( flag == 2 ) 
        {
            if(str[i]>='0'&&str[i]<='9')
            {              
                if(len >= 10)      //##位数溢出
                {
                    printf("位数溢出\n");
                    if(symbol==-1)
                        return INT_MIN;
                    if(symbol==1)
                        return INT_MAX;   
                }
    
                if(len==0&&str[i]=='0') //第1个元素是0，不接受
                    continue;
                s[len] = str[i]-'0';
                len++;
   
            }   
            else
            {
                //flag = 3;//表示结束
                break;    
            }
                
        }
    }
    
    int result = 0;
    int times = 1;
    //检验10位大小溢出问题
    //法1：
    if(len==10)
    {
        if(s[0] > 2)
        {
            flag = -1;
        }
        if(s[0]==2)
        {
            for(i = len-1;i>=1;i--)
            {
                result += s[i]*times;
                times *=10;            
            }
            if(symbol==-1 && result>INT_MAX-2000000000+1)
                flag = -1;
            if(symbol== 1 && result>INT_MAX-2000000000)
                flag = -1; 
        }
    }
    if(flag == -1)
    {
        printf("10位数 但大小溢出\n");
        if(symbol==-1)
            return INT_MIN;
        if(symbol==1)
            return INT_MAX;          
    }
    

    //常规计算数组结果
    result=0;
    times=1;
    for(i = len-1;i>=0;i--)
    {
        result += s[i]*times;
        times *=10;            
    }

    printf("%d\n",flag);
    printf("%d\n",len);
    result = symbol*result;        

    return result;
}
*/


//方法总结如下：
/*
    //检验10位大小溢出问题
    //法1：int类型，
    //判断 后9位 ？ INT_MAX的后9位
    //len>10  溢出
    //len==10，  最高位>2时，溢出
                最高位==2时，正数result>INT_MAX-2000000000溢出
                            负数result>INT_MAX-2000000000+1溢出                            
    if(len==10)
    {
        if(s[0] > 2)
        {
            flag = -1;
        }
        if(s[0]==2)
        {
            for(i = len-1;i>=1;i--)
            {
                result += s[i]*times;
                times *=10;            
            }
            if(symbol==-1 && result>INT_MAX-2000000000+1)
                flag = -1;
            if(symbol== 1 && result>INT_MAX-2000000000)
                flag = -1; 
        }
    }
    
    //法2：在相加的时候就比较大小
    //判断 前9位 ？ INT_MAX的前9位
        if(sign==1&&(INT_MAX/10<ans || (INT_MAX/10==ans&&INT_MAX%10<=tmp)))
            return INT_MAX;
        else if(sign==-1&&(-(INT_MIN/10)<ans || (-(INT_MIN/10)==ans&&-(INT_MIN%10)<=tmp)))
            return INT_MIN;
        for(i = 0;i<len;i++)
        {
            if(i == 9)
            {
                if(sign==1)
                    if( result>INT_MAX/10 || (result==INT_MAX/10 && s[i]>=INT_MAX%10))//溢出
                        return 0;
                if(sign==-1)
                    if( result>INT_MAX/10 || (result==INT_MAX/10 && s[i]>=INT_MAX%10+1))//溢出
                        return 0;                
            }
            result = result*10 +s[i];
        }
    //法3：用long类型计算结果，然后比较与INT_MAX的大小
    //最简单
*/