  21. 合并两个有序链表
  合并两个有序链表
将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    
    if(l1==NULL&&l2==NULL)
        return NULL;
    
    struct ListNode* p1 = l1;
    struct ListNode* p2 = l2;
    
    struct ListNode* head = (struct ListNode*)malloc(sizeof(struct ListNode));//新链表的首节点，要删除
    struct ListNode* p3 = head;
    
   // struct ListNode* temp;
    int len = 0;
    while(p1!=NULL || p2!=NULL)
    {
        len++;
        if(p1!=NULL && p2!=NULL )//都存在
        {
        //    temp = p3->next;
            
            if(p1->val > p2->val)
            {  
                
                p3->next = p2;
                p2 = p2->next;            
            }
            else if(p1->val < p2->val)
            {
                p3->next = p1;
                p1 = p1->next;                
            }
            else //相等的话任意选一个即可，我默认先l1，后l2
            {
                p3->next = p1;
                p1 = p1->next;       
            }                     
        }
        else if(p1==NULL && p2!=NULL)//有一个为NULL的话，没办法只能选另一个
        {
            p3->next = p2;
            p2 = p2->next;   
        }
 
        else if(p1!=NULL && p2==NULL)
        {
            p3->next = p1;
            p1 = p1->next;    
        }      
        p3 = p3->next;
        printf("%d ", p3->val);
       
        
    }
    printf("\n%d \n", len);

    //p3->next = NULL;
    p3 = head->next;
    free(head);
    return p3;
}