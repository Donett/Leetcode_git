/*
	有效的字母异位词
	给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的一个字母异位词。

	示例 1:

	输入: s = "anagram", t = "nagaram"
	输出: true
	示例 2:

	输入: s = "rat", t = "car"
	输出: false
	说明:
	你可以假设字符串只包含小写字母。

	进阶:
	如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？
*/

bool isAnagram(char* s, char* t) {
//法2：直接给字母数组[26]个数计数,比较个数是否相同   4ms
    if(strlen(s)!=strlen(t))
        return false;
    int len = strlen(s);
    
    char count_s[26]={0};
    char count_t[26]={0};
    int i;
    for(i=0;i<len;i++)
        count_s[s[i]-'a']++;
    for(i=0;i<len;i++)
        count_t[t[i]-'a']++; 
    for(i=0;i<26;i++)
        if(count_s[i]!=count_t[i])
            return false;
    return true;
        

}
/*
int cmp(const void *a,const void *b)
{
    return *(char*)a>*(char*)b;
}
bool isAnagram(char* s, char* t) {
    
    //法1:先排序，然后直接比较  100ms
    //法2：直接给字母数组[26]个数计数,比较个数是否相同 4ms
    if(strlen(s)!=strlen(t))
        return false;
    int len = strlen(s);
    printf("len=%d\n",len);
    char *p1 = (char*)malloc(sizeof(char)*len + 1); //要+1
    char *p2 = (char*)malloc(sizeof(char)*len + 1);
    strcpy(p1,s);
    strcpy(p2,t);
    
    qsort(p1,len,sizeof(char),cmp);
    qsort(p2,len,sizeof(char),cmp);
    int i;
    for(i=0;i<len;i++)
    {
        printf("%c %c\n",p1[i],p2[i]);
        if(p1[i]!=p2[i])
            return false;
    }

    return true;
}
*/